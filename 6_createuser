#!/bin/zsh
#############################################
# Last change: 2024-01-17 Ariana
# This script facilitates the creation of a user account by automating several steps
# It ensures that the provided user information is correct and follows the required conventions
#############################################

# Function to check if a variable is empty
# Usage: check_empty <variable> <variable_name_in_error_message>
# -z checks if the given string (in this case, the value of $1) is empty
# If the string is empty, it indicates an error, and the script exits with code 1
# $1: The first argument passed to the function (the variable to be checked)
# $2: The second argument passed to the function (variable name for error message)
check_empty() {
    if [ -z "$1" ]; then 
        # Display an error message and exit if the variable is empty
        echo "$2 is empty! Please check the textfile"
        # exit 1: Exit the script with a non-zero status code (1) indicating an error
        exit 1
    fi
}

# Function to convert/replace special characters and diacritics for the account name
# Usage: convert_accountname <original_accountname>
# iconv -t ascii//TRANSLIT: Convert characters to ASCII, removing diacritics
# sed -r "s/[\ \"\'\^\`\´]+//g": Remove special characters and spaces
# tr -d '[:space:]': Remove any remaining spaces
# tr ' ' '-': Replace spaces with hyphens
# | tr '[:upper:]' '[:lower:]': Convert the result to lowercase
convert_accountname() {
    # Capture the converted name in a local variable
    local converted_name=$(echo "$1" | iconv -t ascii//TRANSLIT | sed -r "s/[\ \"\'\^\`\´]+//g" | tr -d '[:space:]' | tr ' ' '-')
    
    # Print the converted name in lowercase
    echo "$converted_name" | tr '[:upper:]' '[:lower:]'
}

# Function to convert/replace special characters and diacritics for the full name
# Usage: convert_fullname <original_fullname>
# sed 's/[\ \"'"'"'\^\`\´]+//g': Remove special characters and spaces
# tr -d '[:space:]': Remove any remaining spaces
# tr ' ' '-': Replace spaces with hyphens
convert_fullname() {
    # Remove special characters and spaces, replace spaces with hyphens
    echo "$1" | sed 's/[\ \"'"'"'\^\`\´]+//g' | tr -d '[:space:]' | tr ' ' '-'
}

# Function to create a new user
privileges to create new directory entries.

create_user() {
    # Create a new user (username) with string operation from "5_user_information.txt"
    # The command `dscl` is a Directory Service command line utility used to manipulate Directory Service data.
    # The option `-create` is used to create a new directory entry in the specified directory node.
    # Here, we are creating a new user entry under /Users/ directory with the specified username.
    sudo dscl . -create /Users/"$accountname"
    sudo dscl . -create /Users/"$accountname" RealName "$fullname"
    sudo dscl . -passwd /Users/"$accountname" "$pw"

    # (Optional) Add a password hint   
    # sudo dscl . -create /Users/"$accountname" hint "$pwh"

    # (Optional) Add a profile picture   
    # sudo dscl . -create /Users/"$accountname" picture “/path to picture.png”  

    # Creating UID & GID
    # `"$0"` represents the path of the script itself.
    # `dirname` is a command that extracts the directory component of a file's path.
    path1="$(dirname "$0")/noneedtostart.sh"
    source "$path1"

    # Finally setting Unique ID for New user
    sudo dscl . -create /Users/"$accountname" UniqueID $NEXTUID

    # Set the group ID for the user with retrieved specific group staff ID  
    sudo dscl . -create /Users/"$accountname" PrimaryGroupID $STAFFGID

    # Login shell  
    sudo dscl . -create /Users/"$accountname" UserShell /bin/zsh  

    # Create a Home folder for the user  
    sudo dscl . -create /Users/"$accountname" NFSHomeDirectory /Users/"$accountname"

    # Append the User with admin privilege. If this line is not included the user will be set as standard user
    # sudo dscl . -append /Groups/admin GroupMembership "$accountname"

    echo "User created successfully"
}

# Variable for path where textfile is located
# The expression "$(dirname "$0")" is used to retrieve the directory of the currently executing script.
# `"$0"` represents the path of the script itself.
# `dirname` is a command that extracts the directory component of a file's path.
# The overall expression returns the directory containing the script.
path="$(dirname "$0")/5_user_information.txt"

# From which file do we get the informations
source "$path"

# Variables created in the textfile "5_user_information.txt"
accountname="$FIRSTNAME$SURNAME"
fullname="$FIRSTNAME $SURNAME"
pw="$PASSWORD"

# Check if variables are empty
check_empty "$FIRSTNAME" "FIRSTNAME"
check_empty "$SURNAME" "SURNAME"
check_empty "$PASSWORD" "PASSWORD"

# Convert/Replace special characters and diacritics for the account name
accountname=$(convert_accountname "$accountname")

# Convert/Replace special characters and diacritics for the full name
fullname=$(convert_fullname "$fullname")

# Test command to check the output from converted variables
echo "$accountname"
echo "$fullname"
echo "$pw"

# Ask the user if their entered user information in "5_user_information.txt" is correct
read -p "Are your informations correct? (y/n) : " answer;

# If the user types y (Yes) in the terminal, it continues the script
# If the user types n (No) in the terminal, it stops automatically the script with *fi (Is set at the end of the script)
if [ "$answer" == "y" ]; then
    create_user
fi
