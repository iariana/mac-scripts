#!/bin/zsh
#############################################
# Last change: 2024-04-24 Ariana
# This script facilitates the creation of a user account and changes the hostname by automating several steps
#############################################

# Define variables
user_data_file="$(dirname "$0")/resources/user_data.txt"
source "$user_data_file"

# Function to check if a variable is empty
# Usage: check_empty <variable> <variable_name_in_error_message>
# -z checks if the given string (in this case, the value of $1) is empty
# If the string is empty, it indicates an error, and the script exits with code 1
# $1: The first argument passed to the function (the variable to be checked)
# $2: The second argument passed to the function (variable name for error message)
check_empty() {
    if [ -z "$1" ]; then 
        echo "$2 is empty! Please check the textfile"
        exit 1
    fi
}

# Function to convert/replace special characters and diacritics for the account name
# Usage: convert_accountname <original_accountname>
# iconv -t ascii//TRANSLIT: Convert characters to ASCII, removing diacritics
# sed -r "s/[\ \"\'\^\`\´]+//g": Remove special characters and spaces
# tr -d '[:space:]': Remove any remaining spaces
# tr ' ' '-': Replace spaces with hyphens
# | tr '[:upper:]' '[:lower:]': Convert the result to lowercase
convert_accountname() {
    # Capture the converted name in a local variable
    local converted_name=$(echo "$1" | /usr/bin/iconv -t ascii//TRANSLIT | /usr/bin/sed -r "s/[\ \"\'\^\`\´]+//g" | /usr/bin/tr -d '[:space:]' | /usr/bin/tr ' ' '-')
	# Print the converted name in lowercase
    echo "$converted_name" | /usr/bin/tr '[:upper:]' '[:lower:]'
}

# Function to convert/replace special characters and diacritics for the full name
# Usage: convert_fullname <original_fullname>
# sed 's/[\ \"'"'"'\^\`\´]+//g': Remove special characters and spaces
# tr -d '[:space:]': Remove any remaining spaces
# tr ' ' '-': Replace spaces with hyphens
convert_fullname() {
	# Remove special characters and spaces, replace spaces with hyphens
    echo "$1" | /usr/bin/sed 's/[\ \"'"'"'\^\`\´]+//g' | /usr/bin/tr -d '[:space:]' | /usr/bin/tr ' ' '-'
}

# Create variables
accountname=$(convert_accountname "${FIRSTNAME:0:1}${SURNAME}")
fullname=$(convert_fullname "$FIRSTNAME $SURNAME")
pw="$PASSWORD"
passwordhint="$PASSWORDHINT"
hostname="DONE-$HOSTNAME"

# Check if variables for user and hostname are empty
check_empty "$FIRSTNAME" "FIRSTNAME"
check_empty "$SURNAME" "SURNAME"
check_empty "$PASSWORD" "PASSWORD"
check_empty "$PASSWORDHINT" "PASSWORDHINT"
check_empty "$HOSTNAME" "HOSTNAME"

# Define functions
# Function to create a new user
create_user() {
    # Create a new user (username) with string operation from "5_user_information.txt"
    # The command `dscl` is a Directory Service command line utility used to manipulate Directory Service data.
    # The option `-create` is used to create a new directory entry in the specified directory node.
    # Here, we are creating a new user entry under /Users/ directory with the specified username.
    sudo_cmd="/usr/bin/sudo"
    dscl_cmd="/usr/bin/dscl"

    $sudo_cmd $dscl_cmd . -create /Users/"$accountname"
    $sudo_cmd $dscl_cmd . -create /Users/"$accountname" RealName "$fullname"
    $sudo_cmd $dscl_cmd . -passwd /Users/"$accountname" "$pw"

    # Creating UID & GID
    MAXUID=$($sudo_cmd $dscl_cmd . list /Users UniqueID | $sudo_cmd /usr/bin/awk '$2>m{m=$2}END{print m}')
    NEXTUID=$((MAXUID + 1))
    STAFFGID=$($sudo_cmd $dscl_cmd . read /Groups/staff PrimaryGroupID | $sudo_cmd /usr/bin/awk '{print $2}')

    $sudo_cmd $dscl_cmd . -create /Users/"$accountname" UniqueID $NEXTUID
    $sudo_cmd $dscl_cmd . -create /Users/"$accountname" PrimaryGroupID $STAFFGID
    $sudo_cmd $dscl_cmd . -create /Users/"$accountname" UserShell /bin/zsh  
    #$sudo_cmd $dscl_cmd . -create /Users/"$accountname" NFSHomeDirectory /Users/"$accountname"

    # Set the user's short name (username) to the accountname
    $sudo_cmd $dscl_cmd . -create /Users/"$accountname" RecordName "$accountname"

    echo "User created successfully"
}

# Function to change the hostname
change_hostname() {
    sudo_cmd="/usr/bin/sudo"  # Define path to sudo command
    scutil_cmd="/usr/sbin/scutil"  # Define path to scutil command

    # Set the new hostname for all three hostnames
    $sudo_cmd $scutil_cmd --set ComputerName "$hostname"  # Set the computer name
    $sudo_cmd $scutil_cmd --set HostName "$hostname"  # Set the host name
    $sudo_cmd $scutil_cmd --set LocalHostName "$hostname"  # Set the local host name

    echo "Hostname changed successfully to $hostname"  # Print success message
}

# Verbose output of variables for verification
echo "Accountname: $accountname"
echo "Fullname: $fullname"
echo "Password: $pw"
echo "Password Hint: $passwordhint"
echo "Hostname: $hostname"

# User confirms the information
echo "Are your informations correct? (y/n): "
read -r answer

# Convert input to lowercase
answer=$(echo "$answer" | /usr/bin/tr '[:upper:]' '[:lower:]')

# If the user types y (Yes) in the terminal, it continues the script
# If the user types n (No) in the terminal, it stops automatically the script
if [ "$answer" = "y" ]; then
    create_user
    change_hostname
fi
